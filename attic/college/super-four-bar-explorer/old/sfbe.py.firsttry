#! /usr/bin/env python
"""This is meant to be an implementation of the Gauss-Newton optimization
method on the position equations for a four-bar linkage.

Use linkagefit(points,v,tvector) to get a solution."""

from numpy import *
from scipy.linalg import cg

def jacobian(v,sig,tvector):
    #This function defines the Jacobian of my problem.
    
    #Building blocks for the Jacobian.
    #These may get integrated into the Jacobian blocks,
    #but, as they're unweildy, most of them will likely remain separate.
    def grad_Sx(r1,r2,r3,r4,t1,hx,hy,Ox,Oy,sig,t2):
        return array([\
        hx*(-2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(-2*r4*sin(t1) + sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(4*r1 - 4*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) + 2*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*cos(t1) + 2*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*sin(t1))) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(-2*r1 + 2*r4*cos(t1) + 2*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))*sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))) + cos(t1)) + hy*(-sin(t1) - 2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(-2*r4*sin(t1) + sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(4*r1 - 4*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) + 2*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*cos(t1) + 2*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*sin(t1))) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(-2*r1 + 2*r4*cos(t1) + 2*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))*cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))))),
        hy*(-2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(2*r4*sin(t2) + sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(4*r2 - 4*r1*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) - 2*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*cos(t2) - 2*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*sin(t2))) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(-2*r2 - 2*r4*cos(t2) + 2*r1*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))*cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))) + sin(t2)) + (1 - hx)*cos(t2) - 2*hx*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(2*r4*sin(t2) + sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(4*r2 - 4*r1*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) - 2*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*cos(t2) - 2*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*sin(t2))) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(-2*r2 - 2*r4*cos(t2) + 2*r1*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))*sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))),
        -2*hx*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(2*r3*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)) + 2*r3*sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)))*sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))) - 2*hy*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(2*r3*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)) + 2*r3*sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)))*cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))),
        hx*(-2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(-2*r1*sin(t1) + 2*r2*sin(t2) + sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-2*r4*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) + 0.5*(-4*r2*cos(t2) + 4*r1*cos(t1))*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1)) + 0.5*(-4*r2*sin(t2) + 4*r1*sin(t1))*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1)))) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(-2*r4 - 2*r2*cos(t2) + 2*r1*cos(t1))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))*sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))) + cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))))) + hy*(-sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))) - 2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(-2*r1*sin(t1) + 2*r2*sin(t2) + sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-2*r4*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) + 0.5*(-4*r2*cos(t2) + 4*r1*cos(t1))*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1)) + 0.5*(-4*r2*sin(t2) + 4*r1*sin(t1))*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1)))) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(-2*r4 - 2*r2*cos(t2) + 2*r1*cos(t1))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))*cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))))),
        hx*(-r1*sin(t1) - 2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(-4*r1*r2*cos(t1)**2*cos(t2)*sin(t2) + 4*r1*r2*sin(t1)**2*cos(t2)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) - 2*r1*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*sin(t1) + 2*r1*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*cos(t1)) - 2*r1*r4*cos(t1)) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))*(-2*r1*r4*sin(t1) - 2*r1*r2*sin(t1)**2*cos(t2)*sin(t2) + 2*r1*r2*cos(t1)**2*cos(t2)*sin(t2)))*sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))))) + hy*(-r1*cos(t1) - 2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(-4*r1*r2*cos(t1)**2*cos(t2)*sin(t2) + 4*r1*r2*sin(t1)**2*cos(t2)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) - 2*r1*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*sin(t1) + 2*r1*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*cos(t1)) - 2*r1*r4*cos(t1)) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))*(-2*r1*r4*sin(t1) - 2*r1*r2*sin(t1)**2*cos(t2)*sin(t2) + 2*r1*r2*cos(t1)**2*cos(t2)*sin(t2)))*cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))))),
        r1*cos(t1) + r4*cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))) - r2*cos(t2),
        r2*sin(t2) - r1*sin(t1) - r4*sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))),
        1,
        0])
    
    def grad_Sy(r1,r2,r3,r4,t1,hx,hy,Ox,Oy,sig,t2):
        return array([hx*(2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(-2*r4*sin(t1) + sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(4*r1 - 4*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) + 2*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*cos(t1) + 2*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*sin(t1))) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(-2*r1 + 2*r4*cos(t1) + 2*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))*cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))) + sin(t1)) + hy*(-cos(t1) + 2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(-2*r4*sin(t1) + sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(4*r1 - 4*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) + 2*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*cos(t1) + 2*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*sin(t1))) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(-2*r1 + 2*r4*cos(t1) + 2*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))*sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))))),
        hy*(2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(2*r4*sin(t2) + sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(4*r2 - 4*r1*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) - 2*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*cos(t2) - 2*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*sin(t2))) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(-2*r2 - 2*r4*cos(t2) + 2*r1*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))*sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))) + cos(t2)) + (1 - hx)*sin(t2) + 2*hx*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(2*r4*sin(t2) + sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(4*r2 - 4*r1*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) - 2*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*cos(t2) - 2*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*sin(t2))) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(-2*r2 - 2*r4*cos(t2) + 2*r1*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))*cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))) ,
        2*hx*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(2*r3*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)) + 2*r3*sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)))*cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))) + 2*hy*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(2*r3*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)) + 2*r3*sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)))*sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))),
        hx*(2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(-2*r1*sin(t1) + 2*r2*sin(t2) + sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-2*r4*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) + 0.5*(-4*r2*cos(t2) + 4*r1*cos(t1))*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1)) + 0.5*(-4*r2*sin(t2) + 4*r1*sin(t1))*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1)))) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(-2*r4 - 2*r2*cos(t2) + 2*r1*cos(t1))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))*cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))) + sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))))) + hy*(-cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))) + 2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(-2*r1*sin(t1) + 2*r2*sin(t2) + sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-2*r4*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) + 0.5*(-4*r2*cos(t2) + 4*r1*cos(t1))*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1)) + 0.5*(-4*r2*sin(t2) + 4*r1*sin(t1))*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1)))) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(-2*r4 - 2*r2*cos(t2) + 2*r1*cos(t1))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))*sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))))),
        hx*(r1*cos(t1) + 2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(-4*r1*r2*cos(t1)**2*cos(t2)*sin(t2) + 4*r1*r2*sin(t1)**2*cos(t2)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) - 2*r1*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*sin(t1) + 2*r1*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*cos(t1)) - 2*r1*r4*cos(t1)) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))*(-2*r1*r4*sin(t1) - 2*r1*r2*sin(t1)**2*cos(t2)*sin(t2) + 2*r1*r2*cos(t1)**2*cos(t2)*sin(t2)))*cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))))) + hy*(r1*sin(t1) + 2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(-4*r1*r2*cos(t1)**2*cos(t2)*sin(t2) + 4*r1*r2*sin(t1)**2*cos(t2)*sin(t2))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) - 2*r1*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*sin(t1) + 2*r1*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*cos(t1)) - 2*r1*r4*cos(t1)) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))*(-2*r1*r4*sin(t1) - 2*r1*r2*sin(t1)**2*cos(t2)*sin(t2) + 2*r1*r2*cos(t1)**2*cos(t2)*sin(t2)))*sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))))),
        r1*sin(t1) + r4*sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))) - r2*sin(t2),
        r2*cos(t2) - r1*cos(t1) - r4*cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2)))),
        0,
        1])
    
    def dSxdt2(r1,r2,r3,r4,t1,hx,hy,Ox,Oy,sig,t2):
        return hy*(r2*cos(t2) - 2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(-4*r1*r2*cos(t2)**2*cos(t1)*sin(t1) + 4*r1*r2*sin(t2)**2*cos(t1)*sin(t1))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) - 2*r2*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*cos(t2) + 2*r2*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*sin(t2)) + 2*r2*r4*cos(t2)) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))*(2*r2*r4*sin(t2) - 2*r1*r2*sin(t2)**2*cos(t1)*sin(t1) + 2*r1*r2*cos(t2)**2*cos(t1)*sin(t1)))*cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))))) - r2*(1 - hx)*sin(t2) - 2*hx*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(-4*r1*r2*cos(t2)**2*cos(t1)*sin(t1) + 4*r1*r2*sin(t2)**2*cos(t1)*sin(t1))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) - 2*r2*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*cos(t2) + 2*r2*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*sin(t2)) + 2*r2*r4*cos(t2)) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))*(2*r2*r4*sin(t2) - 2*r1*r2*sin(t2)**2*cos(t1)*sin(t1) + 2*r1*r2*cos(t2)**2*cos(t1)*sin(t1)))*sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))))
    
    def dSydt2(r1,r2,r3,r4,t1,hx,hy,Ox,Oy,sig,t2):
        return hy*(-r2*sin(t2) + 2*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(-4*r1*r2*cos(t2)**2*cos(t1)*sin(t1) + 4*r1*r2*sin(t2)**2*cos(t1)*sin(t1))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) - 2*r2*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*cos(t2) + 2*r2*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*sin(t2)) + 2*r2*r4*cos(t2)) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))*(2*r2*r4*sin(t2) - 2*r1*r2*sin(t2)**2*cos(t1)*sin(t1) + 2*r1*r2*cos(t2)**2*cos(t1)*sin(t1)))*sin(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))))) + r2*(1 - hx)*cos(t2) + 2*hx*r4/(1 + (sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))**2*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2))*(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**-0.5*(-0.5*(-4*r1*r2*cos(t2)**2*cos(t1)*sin(t1) + 4*r1*r2*sin(t2)**2*cos(t1)*sin(t1))*(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2)) - 2*r2*r4*(-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))*cos(t2) + 2*r2*r4*(-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))*sin(t2)) + 2*r2*r4*cos(t2)) + (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**(-2)*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))*(2*r2*r4*sin(t2) - 2*r1*r2*sin(t2)**2*cos(t1)*sin(t1) + 2*r1*r2*cos(t2)**2*cos(t1)*sin(t1)))*cos(2*atan(1/(r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r4*cos(t1) + 2*r2*r4*cos(t2) - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))*(sig*((-2*r2*r4*cos(t2) + 2*r1*r4*cos(t1))**2 + (-2*r2*r4*sin(t2) + 2*r1*r4*sin(t1))**2 - (r1**2 + r2**2 + r4**2 - r3**2 - 2*r1*r2*cos(t1)*cos(t2)*sin(t1)*sin(t2))**2)**0.5 - 2*r1*r4*sin(t1) + 2*r2*r4*sin(t2))))
    
    #The block matrices for the Jacobian.
    #v contains all the parameters; It's here that I finally break them down.
    #There's probably a more elegant way to do it that I'm not aware of.
    #tvector contains all the \((theta_2)_j\)s,
    def Jx(v,sig,tvector):
        Jx=array([])
        for t2 in tvector:
            if Jx.shape[0]==0:
                Jx=grad_Sx(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],sig,t2)
            else:
                Jx=vstack((Jx,grad_Sx(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],sig,t2)))
        return Jx
    
    def Jy(v,sig,tvector):
        Jy=array([])
        for t2 in tvector:
            if Jy.shape[0]==0:
                Jy=grad_Sy(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],sig,t2)
            else:
                Jy=vstack((Jy,grad_Sy(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],sig,t2)))
        return Jy
    
    #hopefully these are as slick as I think they are.
    def Dx(v,sig,tvector):
        return diag(dSxdt2(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],sig,tvector),0)

    def Dy(v,sig,tvector):
        return diag(dSydt2(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],sig,tvector),0)

    return hstack(((vstack((Jx(v,sig,tvector),Jy(v,sig,tvector))),vstack((Dx(v,sig,tvector),Dy(v,sig,tvector))))))

#Mr. Jacobian's good friend.
#Also hopefully as slick as I think it is.
def residuals(x,y,v,sig,tvector):
    #bits and pieces for the residual vector;
    #Oh, lordy.
    def A(r1,r2,r4,t1,t2): return 2*r1*r4*cos(t1)-2*r2*r4*cos(t2)
    def B(r1,r2,r4,t1,t2): return 2*r1*r4*sin(t1)-2*r2*r4*sin(t2)
    def C(r1,r2,r3,r4,t1,t2): return r1**2+r2**2+r4**2-r3**2-2*r1*r2*(cos(t1)*cos(t2)*sin(t1)*sin(t2))
    def t4(r1,r2,r3,r4,t1,sig,t2): return 2*arctan((-B(r1,r2,r4,t1,t2)+sig*(B(r1,r2,r4,t1,t2)**2-C(r1,r2,r3,r4,t1,t2)**2+A(r1,r2,r4,t1,t2)**2)**0.5)/(C(r1,r2,r3,r4,t1,t2)-A(r1,r2,r4,t1,t2)))
    def Px(r1,r2,r3,r4,t1,Ox,sig,t2): return r1*cos(t1)+r4*cos(t4(r1,r2,r3,r4,t1,t2,sig))+Ox
    def Py(r1,r2,r3,r4,t1,Oy,sig,t2): return r1*sin(t1)+r4*sin(t4(r1,r2,r3,r4,t1,t2,sig))+Oy
    def Qx(r2,Ox,t2): return r2*cos(t2)+Ox
    def Qy(r2,Oy,t2): return r2*sin(t2)+Oy
    def Sx(r1,r2,r3,r4,t1,hx,hy,Ox,Oy,sig,t2): return (1-hx)*Qx(r2,Ox,t2)+hx*Px(r1,r2,r3,r4,t1,Ox,sig,t2)+hy*(Qy(r2,Oy,t2)-Py(r1,r2,r3,r4,t1,Oy,sig,t2))
    def Sy(r1,r2,r3,r4,t1,hx,hy,Ox,Oy,sig,t2): return (1-hx)*Qy(r2,Oy,t2)+hx*Py(r1,r2,r3,r4,t1,Oy,sig,t2)+hy*(Qx(r2,Ox,t2)-Px(r1,r2,r3,r4,t1,Ox,sig,t2))
    print v[8]
    return hstack((Sx(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],sig,tvector)-x,Sy(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],sig,tvector)-y))

#A single iteration of the method.
def iteration(points,v,sig,tvector):
    x=hstack((v,tvector))
    J=jacobian(v,sig,tvector)
    r=residuals(points[:,0],points[:,1],v,sig,tvector)
    dell=dot(J.T,r)
    #Solving this with a conjugate gradient method,
    #Hopefully the zero entries lead to some savings.
    #there may also be a way to get savings by not multiplying out J'J,
    #but idk how to do that.
    pk=linalg.cg(dot(J.T,J),-dell)[0]
    #Using backtracking to get alpha
    #Using this method because it's what I know.
    #http://en.wikipedia.org/wiki/Wolfe_conditions
    alpha=1.0 #"For Newton and quasi-Newton methods, the step \(\alpha_0 = 1\) should always be used as the initial trial step length."--pg. 59
    rho=0.7 #between 0 and 1
    c=0.1**6 #The "C_1" used in the first wolfe condish. between 0 and 1, typically "quite small"
    xnew=x+alpha*pk
    rnew=residuals(points[:,0],points[:,1],xnew[0:8],sig,xnew[9:shape(x)[0]])
    while dot(rnew,rnew) > dot(r,r)+c*alpha*dot(dell,pk):
        alpha=rho*alpha
        xnew=x+alpha*pk
        rnew=residuals(points[:,0],points[:,1],xnew[0:8],sig,xnew[9:shape(x)[0]-1])
    return xnew[0:8],xnew[9:shape(x)[0]]
    
#Everything comes together here.
def linkagefit(points,v,tvector):
    #returns fitted v, dyad configuration and fitted thetas in that order.
    threshhold=0.1*3 #Some measure of how much improvement the algorithm's
                     #producing.
    returns=1 #Make sure this is bigger than the threshhold.
              #Otherwise it doesn't matter.
    for sig in [-1,1]:
        vnew=array([v,v])
        tnew=array([tvector,tvector])
        rnew=array([residuals(points[:,0],points[:,1],v,sig,tvector),residuals(points[:,0],points[:,1],v,sig,tvector)])
        while returns > threshhold:
            vnew[(sig+1)/2],tnew[(sig+1)/2]=iteration(points,vnew[(sig+1)/2],sig,tnew[(sig+1)/2])
            rold=rnew[(sig+1)/2]
            rnew[(sig+1)/2]=residuals(points[:,0],points[:,1],vnew[(sig+1)/2],sig,tvector)
            returns=norm(rold)/norm(rnew[(sig+1)/2])-1
    if dot(rnew[0],rnew[0])>= dot(rnew[0],rnew[0]):
        return vnew[0],-1,tnew[0]
    else: return vnew[1],1,tnew[1]
    
