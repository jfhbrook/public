#!/usr/bin/env bash

set -euo pipefail

HELP='USAGE: pgp-dm COMMAND [ARGUMENTS] [OPTIONS]

Encode and decode text with GPG, including support for QR images. Based on the
following blog post:

    https://blog.nthia.dev/pgp-dm.html

COMMANDS:
  encrypt RECIPIENT                Encrypt a message to text
  encrypt-qr RECIPIENT             Encrypt a message to QR code

  decrypt [FILE]                   Decrypt a message from text (from file if
                                   specified, or from the clipboard otherwise)
  decrypt-qr [FILE]                Decrypt a message from QR code (from file if
                                   specified, or from the clipboard otherwise)

  generate-primary-key NAME EMAIL  Generate a PGP primary key
  generate-signing-key             Generate a PGP signing key
  generate-encryption-key          Generate a PGP encryption key
  export-public-key NAME           Export your public PGP key
  import-public-key URL            Import a public PGP key from a URL
  trust-public-key NAME            Trust a public PGP key
  list-public-keys                 List public PGP keys

OPTIONS:
  --help       Show this help and exit
  --clipboard  Send encrypted messages and QR codes to the clipboard
  --no-clean   Do not clean up unencrypted message text
'

function print-help {
  echo "${HELP}" 1>&2
}

COMMAND=''
KEY_NAME=''
KEY_EMAIL=''
URL=''
RECIPIENT=''
FILE=''
CLIPBOARD=''
CLEAN=1
COPY_BIN=''
PASTE_BIN=''

function parse-argv {
  while [ $# -gt 0 ]; do
    case "${1}" in
      --help)
        print-help
        exit 0
        ;;
      --clipboard)
        CLIPBOARD=1
        shift
        ;;
      --no-clean)
        CLEAN=''
        shift
        ;;
      -*)
        echo "ERROR: Unknown option ${1}" 1>&2
        print-help
        exit 1
        ;;
      *)
        if [ -z "${COMMAND}" ]; then
          COMMAND="${1}"
        else
          case "${COMMAND}" in
            generate-primary-key)
              if [ -z "${KEY_NAME}" ]; then
                KEY_NAME="${1}"
              else
                KEY_EMAIL="${1}"
              fi
              ;;
            export-public-key)
              KEY_NAME="${1}"
              ;;
            import-public-key)
              URL="${1}"
              ;;
            trust-public-key)
              KEY_NAME="${1}"
              ;;
            encrypt*)
              RECIPIENT="${1}"
              ;;
            decrypt*)
              FILE="${1}"
              ;;
            *)
              echo "ERROR: Unknown argument ${1}"
              print-help
              exit 1
              ;;
          esac
        fi
        shift
        ;;
    esac
  done
}

function lookup-clipboard-bins {
  if which wl-copy > /dev/null; then
    COPY_BIN=wl-copy
  elif which pbcopy > /dev/null; then
    COPY_BIN=pbcopy
  fi

  if which wl-paste > /dev/null; then
    PASTE_BIN=wl-paste
  elif which pbpaste > /dev/null; then
    PASTE_BIN=pbpaste
  fi
}

function copy-clipboard {
  if [ -n "${COPY_BIN}" ]; then
    "${COPY_BIN}"
  else
    echo 'ERROR: Copying to clipboard is unsupported in this environment' 1>&2
    exit 1
  fi
}

function paste-clipboard {
  if [ -n "${PASTE_BIN}" ]; then
    "${PASTE_BIN}"
  else
    echo \
      'ERROR: Pasting from clipboard is unsupported in this environment' \
      1>&2
    exit 1
  fi
}

function generate-primary-key {
  gpg --quick-generate-key "${KEY_NAME} <${KEY_EMAIL}>" ed25519 cert never
}

function generate-signing-key {
  local fp

  fp=$(gpg --list-options show-only-fpr-mbox --list-secret-keys | awk '{print $1}')
  gpg --batch --passphrase '' --quick-add-key "${fp}" ed25519 sign 0
}

function generate-encryption-key {
  local fp

  fp=$(gpg --list-options show-only-fpr-mbox --list-secret-keys | awk '{print $1}')
  gpg --batch --passphrase '' --quick-add-key "${fp}" cv25519 encrypt 0
}

function export-public-key {
  mkdir -p ~/.local/share/pgp-dm

  gpg --armor --export "${KEY_NAME}" > ~/.local/share/pgp-dm/pubkey.gpg

  if [ -n "${CLIPBOARD}" ]; then 
    copy-clipboard < ~/.local/share/pgp-dm/pubkey.gpg
    rm -f ~/.local/share/pgp-dm/pubkey.gpg
    echo "Exported key copied to clipboard."
  else
    mv ~/.local/share/pgp-dm/pubkey.gpg ~/Desktop/pubkey.gpg
    echo "Exported key saved to ~/Desktop/pubkey.gpg"
  fi
}

function import-public-key {
  curl "${URL}" | gpg --import
}

# trust a pgp key by name
function trust-public-key {
  gpg --edit-key "${KEY_NAME}" trust quit
}

# list public pgp keys
function list-public-keys {
  gpg --list-public
}

# encrypt a text message
function encrypt {
  local now

  mkdir -p ~/.local/share/pgp-dm

  vim ~/.local/share/pgp-dm/msg.txt

  < ~/.local/share/pgp-dm/msg.txt \
    gpg -aesr "${RECIPIENT}" \
    > ~/.local/share/pgp-dm/encrypted.txt
  if [ -z "${CLEAN}" ]; then
    echo "Unencrypted message saved to ~/.local/share/pgp-dm/msg.txt"
  else
    rm -f ~/.local/share/pgp-dm/msg.txt
  fi

  now="$(date +%Y-%m-%d-%H%M%S)"

  if [ -z "${CLIPBOARD}" ]; then
    mv ~/.local/share/pgp-dm/encrypted.txt ~/Desktop/"encrypted-${now}.txt"
    echo "Encrypted message saved to ~/Desktop/encrypted-${now}.txt"
  else
    copy-clipboard < ~/.local/share/pgp-dm/encrypted.txt
    rm -f ~/.local/share/pgp-dm/encrypted.txt
    echo "encrypted message copied to clipboard"
  fi
}

# encrypt a message to a QR code image
function encrypt-qr {
  local now

  mkdir -p ~/.local/share/pgp-dm

  vim ~/.local/share/pgp-dm/msg.txt
  < ~/.local/share/pgp-dm/msg.txt \
    gpg -aesr "${RECIPIENT}" \
    | qrencode -o ~/.local/share/pgp-dm/encrypted.png

  if [ -z "${CLEAN}" ]; then
    echo "Unencrypted message saved to ~/.local/share/pgp-dm/msg.txt"
  else
    rm -f ~/.local/share/pgp-dm/msg.txt
  fi

  now="$(date +%Y-%m-%d-%H%M%S)"

  if [ -z "${CLIPBOARD}" ]; then
    mv ~/.local/share/pgp-dm/encrypted.png ~/Desktop/"encrypted-${now}.png"
    echo "Encrypted QR-encoded message saved to ~/Desktop/encrypted-${DATE}.png"
  else
    copy-clipboard < ~/.local/share/pgp-dm/encrypted.png
    rm -f ~/.local/share/pgp-dm/encrypted.png
    echo "Encrypted QR-encoded message copied to clipboard"
  fi
}

# decrypt a text message from clipboard
function decrypt {
  if [ -z "${FILE}" ]; then
    paste-clipboard | gpg -d
  else
    gpg -d < "${FILE}"
  fi
}

# decrypt a QR code from clipboard
function decrypt-qr {
  mkdir -p ~/.local/share/pgp-dm

  if [ -z "${FILE}" ]; then
    paste-clipboard > ~/.local/share/pgp-dm/encrypted.png
  else
    cp "${FILE}" ~/.local/share/pgp-dm/encrypted.png
  fi

  zbarimg -q --raw ~/.local/share/pgp-dm/encrypted.png | gpg -d

  rm -f ~/.local/share/pgp-dm/encrypted.png
}

function main {
  parse-argv "$@"

  if [ -z "${COMMAND}" ]; then
    print-help
    exit 1
  fi

  if [ -n "${CLIPBOARD}" ]; then
    lookup-clipboard-bins
  fi

  case "${COMMAND}" in
    encrypt)
      encrypt
      ;;
    encrypt-qr)
      encrypt-qr
      ;;
    decrypt)
      decrypt
      ;;
    decrypt-qr)
      decrypt-qr
      ;;
    generate-primary-key)
      generate-primary-key
      ;;
    generate-signing-key)
      generate-signing-key
      ;;
    generate-encryption-key)
      generate-encryption-key
      ;;
    export-public-key)
      export-public-key
      ;;
    import-public-key)
      import-public-key
      ;;
    trust-public-key)
      trust-public-key
      ;;
    list-public-keys)
      list-public-keys
      ;;
    *)
      echo "ERROR: Unknown command ${COMMAND}" 1>&2
      print-help
      exit 1
      ;;
  esac
}

main "$@"
